# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "refresh the cache entry"
    refresh: Boolean! = false,
    "measured in seconds"
    ttl: Int! = 60
) on QUERY

"mutation root"
type mutation_root {
    "delete data from the table: \"user\""
    delete_user(
        "filter the rows which have to be deleted"
        where: user_bool_exp!
    ): user_mutation_response
    "insert data into the table: \"user\""
    insert_user(
        "the rows to be inserted"
        objects: [user_insert_input!]!
    ): user_mutation_response
    "insert a single row into the table: \"user\""
    insert_user_one(
        "the row to be inserted"
        object: user_insert_input!
    ): user
    "update data of the table: \"user\""
    update_user(
        "increments the numeric columns with given value of the filtered values"
        _inc: user_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: user_set_input,
        "filter the rows which have to be updated"
        where: user_bool_exp!
    ): user_mutation_response
    "update multiples rows of table: \"user\""
    update_user_many(
        "updates to execute, in order"
        updates: [user_updates!]!
    ): [user_mutation_response]
}

type query_root {
    "fetch data from the table: \"user\""
    user(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): [user!]!
    "fetch aggregated fields from the table: \"user\""
    user_aggregate(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): user_aggregate!
}

type subscription_root {
    "fetch data from the table: \"user\""
    user(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): [user!]!
    "fetch aggregated fields from the table: \"user\""
    user_aggregate(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): user_aggregate!
    "fetch data from the table in a streaming manner: \"user\""
    user_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [user_stream_cursor_input]!,
        "filter the rows returned"
        where: user_bool_exp
    ): [user!]!
}

"columns and relationships of \"user\""
type user {
    created_at: timestamp
    created_by: String
    email: String
    external_id: String
    id: bigint!
    is_active: Boolean
    is_admin: Boolean
    name: String
    region: String
    slack_id: String
    updated_at: timestamp
}

"aggregated selection of \"user\""
type user_aggregate {
    aggregate: user_aggregate_fields
    nodes: [user!]!
}

"aggregate fields of \"user\""
type user_aggregate_fields {
    avg: user_avg_fields
    count(columns: [user_select_column!], distinct: Boolean): Int!
    max: user_max_fields
    min: user_min_fields
    stddev: user_stddev_fields
    stddev_pop: user_stddev_pop_fields
    stddev_samp: user_stddev_samp_fields
    sum: user_sum_fields
    var_pop: user_var_pop_fields
    var_samp: user_var_samp_fields
    variance: user_variance_fields
}

"aggregate avg on columns"
type user_avg_fields {
    id: Float
}

"aggregate max on columns"
type user_max_fields {
    created_at: timestamp
    created_by: String
    email: String
    external_id: String
    id: bigint
    name: String
    region: String
    slack_id: String
    updated_at: timestamp
}

"aggregate min on columns"
type user_min_fields {
    created_at: timestamp
    created_by: String
    email: String
    external_id: String
    id: bigint
    name: String
    region: String
    slack_id: String
    updated_at: timestamp
}

"response of any mutation on the table \"user\""
type user_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [user!]!
}

"aggregate stddev on columns"
type user_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type user_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type user_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type user_sum_fields {
    id: bigint
}

"aggregate var_pop on columns"
type user_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type user_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type user_variance_fields {
    id: Float
}

"ordering argument of a cursor"
enum cursor_ordering {
    "ascending ordering of the cursor"
    ASC
    "descending ordering of the cursor"
    DESC
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

"select columns of table \"user\""
enum user_select_column {
    "column name"
    created_at
    "column name"
    created_by
    "column name"
    email
    "column name"
    external_id
    "column name"
    id
    "column name"
    is_active
    "column name"
    is_admin
    "column name"
    name
    "column name"
    region
    "column name"
    slack_id
    "column name"
    updated_at
}

scalar bigint

scalar timestamp

"Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'."
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"Boolean expression to compare columns of type \"bigint\". All fields are combined with logical 'AND'."
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

"Boolean expression to compare columns of type \"timestamp\". All fields are combined with logical 'AND'."
input timestamp_comparison_exp {
    _eq: timestamp
    _gt: timestamp
    _gte: timestamp
    _in: [timestamp!]
    _is_null: Boolean
    _lt: timestamp
    _lte: timestamp
    _neq: timestamp
    _nin: [timestamp!]
}

"Boolean expression to filter rows from the table \"user\". All fields are combined with a logical 'AND'."
input user_bool_exp {
    _and: [user_bool_exp!]
    _not: user_bool_exp
    _or: [user_bool_exp!]
    created_at: timestamp_comparison_exp
    created_by: String_comparison_exp
    email: String_comparison_exp
    external_id: String_comparison_exp
    id: bigint_comparison_exp
    is_active: Boolean_comparison_exp
    is_admin: Boolean_comparison_exp
    name: String_comparison_exp
    region: String_comparison_exp
    slack_id: String_comparison_exp
    updated_at: timestamp_comparison_exp
}

"input type for incrementing numeric columns in table \"user\""
input user_inc_input {
    id: bigint
}

"input type for inserting data into table \"user\""
input user_insert_input {
    created_at: timestamp
    created_by: String
    email: String
    external_id: String
    id: bigint
    is_active: Boolean
    is_admin: Boolean
    name: String
    region: String
    slack_id: String
    updated_at: timestamp
}

"Ordering options when selecting data from \"user\"."
input user_order_by {
    created_at: order_by
    created_by: order_by
    email: order_by
    external_id: order_by
    id: order_by
    is_active: order_by
    is_admin: order_by
    name: order_by
    region: order_by
    slack_id: order_by
    updated_at: order_by
}

"input type for updating data in table \"user\""
input user_set_input {
    created_at: timestamp
    created_by: String
    email: String
    external_id: String
    id: bigint
    is_active: Boolean
    is_admin: Boolean
    name: String
    region: String
    slack_id: String
    updated_at: timestamp
}

"Streaming cursor of the table \"user\""
input user_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: user_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input user_stream_cursor_value_input {
    created_at: timestamp
    created_by: String
    email: String
    external_id: String
    id: bigint
    is_active: Boolean
    is_admin: Boolean
    name: String
    region: String
    slack_id: String
    updated_at: timestamp
}

input user_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: user_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: user_set_input
    where: user_bool_exp!
}
